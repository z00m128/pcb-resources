;***********************************************************************
;   DEKREMENTOVANIE (INKREMENTOVANIE), TEST HODNOTY SKUPINY REGISTROV
;***********************************************************************
;Praca pre pripravu s math_rut v.1.0
;   accumulator
;                         ................  MSB_A .............. LSB_A
; adr+9, adr+8, adr+7, adr+6, adr+5, adr+4, adr+3, adr+2, adr+1, adr+0,...
;=========================================================================
;                             inkrement registrov
;=========================================================================
;meni Z
;nemeni W,C,DC

inc_r  macro   prvy_reg,pocet_reg

       local DLZKA_INC_R
       DLZKA_INC_R = 1 + 2 * (pocet_reg - 1)
       local J
       J = 1
               incf    prvy_reg,f
       while J < pocet_reg
               skpnz
               incf    (prvy_reg + J),f
               J += 1
       endw
   endm
;
;po skonceni rutiny, ak Z=L, aspon jeden register ma hodnotu > 0x00
;                    ak Z=H, vsetky registre maju    hodnotu   0x00
;
;CYCLE = 1 + 2 * (pocet_reg - 1), pocet cyklov je vzdy konstantny !!!
;WORD  = 1 + 2 * (pocet_reg - 1)
;=========================================================================
;                             dekrement registrov
;=========================================================================
;
;meni W,C,DC,Z
;na konci rutiny W=1
;
dec_r  macro   prvy_reg,pocet_reg

       local DLZKA_DEC_R
       DLZKA_DEC_R = 2 * pocet_reg
       local J
       J = 1
               movlw   1               ;hodnota, o ktoru sa ma znizit obsah
               subwf   prvy_reg,f
       while J < pocet_reg
               skpc
               subwf   (prvy_reg + J),f
               J += 1
       endw
   endm
;
;CYCLE = 2*pocet_reg
;WORD  = 2*pocet_reg
;
;po skonceni rutiny, ak CY=H, aspon jeden register ma hodnotu < 0xFF
;                    ak CY=L, vsetky registre maju    hodnotu   0xFF
;                                                               (-1)
;=========================================================================
;                                test na ZERO
;=========================================================================
;
;meni      Z,[W (ak pocet_reg > 1)]
;nemeni DC,C,[W (ak pocet_reg = 1)]
;
testz_r   macro   prvy_reg,pocet_reg

          local DLZKA_TESTZ_R
          DLZKA_TESTZ_R = pocet_reg
          local J
          J = 1
          if pocet_reg == 1
               movf    prvy_reg,f
          else
               movf    prvy_reg,w
          endif
          while      J < pocet_reg
               J += 1
               iorwf   (prvy_reg + J),w
          endw
       endm
;
;CYCLE = pocet_reg
;WORD  = pocet_reg
;po skonceni rutiny, ak Z=L, aspon jeden register ma hodnotu > 0x00
;                    ak Z=H, vsetky registre maju    hodnotu = 0x00
;=========================================================================
;               Posun N-bytov o jeden bit do PRAVA cez CY
;=========================================================================
;posuva bity od bytu s adresou 'prvy_reg+pocet_reg-1' k adrese 'prvy_reg'
;
rrc_r  macro   prvy_reg,pocet_reg    ;adresa prveho registra
                                     ;R(n) -> R(n-1) -> ... -> R2 -> R1
               local X               ;     CY(old) -> MSB,...,LSB -> CY
               X = 1
               while X <= pocet_reg
                  rrf  (prvy_reg + pocet_reg - X)
                  X += 1
               endw
       endm
;CYCLE=pocet_reg
;WORD =pocet_reg
;=========================================================================
;               Posun N-bytov o jeden bit do LAVA cez CY
;=========================================================================
;posuva bity od bytu s adresou 'prvy_reg' k adrese 'prvy_reg+pocet_reg-1'
;
rlc_r  macro   prvy_reg,pocet_reg    ;adresa prveho registra
                                     ;R(n) <- R(n-1) <- ... <- R2 <- R1
               local X               ;     CY <- MSB,...,LSB <- CY(old)
               X = 1
               while X <= pocet_reg
                  rlf  (prvy_reg + X - 1)
                  X += 1
               endw
       endm
;CYCLE=pocet_reg
;WORD =pocet_reg
;=========================================================================
;                       Sucet N-bytov bez znamienka
;=========================================================================
;
;  VYSLEDOK_REG(J):= A_REG(J) + B_REG(K)
;
; !!! pocet registrov pre cislo A musi byt rovny, alebo vacsi ako pre B !!!
;
;meni W,C,DC,Z
;
;Ak 'vysledok' nieje definovana premenna, vysledok sa ulozi do A_REG
;
add_r macro   prvy_a,pocet_a,prvy_b,pocet_b,vysledok

;prvy_a

       local SK_REFER  ;koli setreniu navestiami v macre ( max.8)
       local J
       J = 1

  if pocet_a < pocet_b
       messg  "Rozsah A je mensi ako rozsah B, nemozno ulozit vysledok"
  endif
SK_REFER       movf    prvy_b,w
          ifndef vysledok
               addwf   prvy_a,f
          else
               addwf   prvy_a,w
               movwf   vysledok
          endif
       J = 1
       while J < pocet_a
         if pocet_b > J
               movf    (prvy_b + J),w
         else
               movlw   0
         endif
               skpnc
         ifndef vysledok
               goto    SK_REFER + J*7      ;SKOK_A#v(J+1)
               addwf   (prvy_a + J),f
               goto    SK_REFER + J*7 + 2  ;SKOK_B#v(J+1)
         else
               goto    SK_REFER + J*9      ;SKOK_A#v(J+1)
               addwf   (prvy_a + J),w
               movwf   (vysledok + J)
               goto    SK_REFER + J*9 + 3  ;SKOK_B#v(J+1)
         endif

;SK_A#v(J+1)

          if pocet_b > J
               comf    (prvy_b + J),w
          else
               movlw   0xff
          endif
          ifndef vysledok
               subwf   (prvy_a + J),f
          else
               subwf   (prvy_a + J),w
               movwf  (vysledok + J)
          endif

;SK_B#v(J+1)=SK_A#v(J+1)+2

               J += 1
       endw
     endm
;
; Ak    A_REG:=A_REG + B_REG
;
;CYCLE = 2 + 6 * (pocet_a - 1)
;WORD  = 2 + 7 * (pocet_a - 1)
;
; Ak VYSLEDOK:=A_REG + B_REG
;
;CYCLE = 3 + 7 * (pocet_a - 1)
;WORD  = 3 + 9 * (pocet_a - 1)

;
;po skonceni rutiny, ak CY=H,   nastalo pretecenie vysledku
;                    ak CY=L, nenastalo pretecenie vysledku
;







;=========================================================================
;                     Sucin N-bytov bez znamienka
;=========================================================================
;
;  A(J + K):= A(J) * B(K)
;
;meni W,DC,Z
;nemeni C !!!
;
; A je v tzv akumulatore a po skonceni vysledku je prepisany dolnou
; castou vysledku, B sa nemeni, vysledok je v bytoch:
;
;     A(1) az A(J+K-1)
;     A(1)    :dolny byte vysledku
;     A(J+K-1):najvyssy byte vysledku
;
;
succ_r  macro  time,prvy_a,pocet_a,prvy_b,pocet_b,pocitadlo,pocet
;
; time: ak TIME = 1, rutina bude trvat konstantny cas
;       ak TIME = 0, rutina nebude trvat konstantny cas, okrem pripadu
;                    ak pocet_b=1

; prvy_a : adresa dolneho bytu prveho cinitela (A)
; pocet_a: pocet bytov prveho cinitela (A)

; prvy_b : adresa dolneho bytu druheho cinitela (B)
; pocet_b: pocet bytov druheho cinitela (B)

; pocitadlo: adresa prveho pomocneho registra, ak pocet=2, potom ako druhy
;            pomocny register bude pouzity register s adresou 'pocitadlo+1'

; pocet:pocet pomocnych pocitadiel, ktorych hodnota po skonceni vypoctu moze
;       byt menena. Pocet moze mat hodnotu 1 alebo 2. Ak pocet=1 a time =1,
;       program je o tri WORDY dlhsi ako v pripade,ak pocet=2.
;       V druhom pripade potrebujem o jeden pracovny BYTE navyse. Ak time=0,
;       alebo ak pocet_b=1, tento parameter nema vplyv na strukturu rutiny.
;
;      Ak pocet=1 a time=1, potom pocet_b(max)=6  'to je cislo FFFFFFFFFFFF'
;      Ak pocet=2 a time=1, potom pocet_b(max)=127
;      Ak time=0          , pocet_b(max) nieje obmedzeny
;
; DL_WORD  : do premennej sa po prelozeni ulozi pocet WORDOV, ktore rutina
;            zabera
; DL_CYCLE : ak time=1, pocet cyklov
;            ak time=0, pocet cyklov ak A_L=pocet_a*8 (min. pocet cyklov)
; DL_C_MAX : ak time=0, pocet cyklov ak A_H=pocet_a*8 (max. pocet cyklov)
;
;
  if pocet_b > 6 && pocet == 1 && time == 1
    messg  "Pocet bytov premennej B je viac ako 6, nastav pocet=2"
  endif
  if pocet_b > 127 && pocet == 2 && time == 1
    messg  "Pocet bytov premennej B je viac ako 127, zniz pocet_b"
  endif

       local SKOK_1
       local SKOK_2
       local SKOK_3
       local SKOK_4
       local DL_WORD
       local DL_CYCLE
       local DL_C_MAX  ;ak time=0,potom je tu ulozeny maximalny pocet cyklov
       local J



;vypocet dlzky a casu rutiny, ak time=0, v DL_CYCLE=DL_CYCLE_MIN
;
 if pocet_b == 1
  DL_WORD  =9 + 2 * pocet_a
  DL_CYCLE = 3 + D'49' * pocet_a + 8 * pocet_a * pocet_a
 endif
 if pocet_b > 1 && time == 0
    DL_WORD  = 1+2*pocet_a+9*pocet_b
    DL_CYCLE = 1+D'49'*pocet_a+pocet_b+8*pocet_a*pocet_a+8*pocet_a*pocet_b
    DL_C_MAX = 1+pocet_b+9*pocet_a+8*pocet_a*pocet_a+D'56'*pocet_a*pocet_b
 endif
 if pocet_b > 1 && time == 1 && pocet ==1
  DL_WORD  = 9 + 2 * pocet_a + 9 * pocet_b
  DL_CYCLE = 1+D'17'*pocet_a+pocet_b+8*pocet_a*pocet_a+D'56'*pocet_a*pocet_b
 endif
 if pocet_b > 1 && time == 1 && pocet == 2
  DL_WORD  = 6 + 2 * pocet_a + 9 * pocet_b
  DL_CYCLE = 1+D'17'*pocet_a+pocet_b+8*pocet_a*pocet_a+D'56'*pocet_a*pocet_b
 endif
;
;*** CYCLE = pocet_b
;    WORD  = pocet_b
;
       J = 0
       while J < pocet_b
               clrf    (prvy_a + pocet_a + J) ;vycisti priestor za A
               J += 1
       endw

;*** CYCLE = 2, (3 ak je pocet_b=1)
;    WORD  = 2, (3 ak je pocet_b=1)

       movlw   (pocet_a * 8) ;pocet bitov,ktore treba rotovat a testovat
       movwf   pocitadlo       ; na CY
       if      pocet_b == 1
               movf    prvy_b,w
       endif
;
;*** CYCLE = pocet_a * (pocet_a * 8)
;    WORD  = pocet_a

SKOK_1

       rrc_r   prvy_a,pocet_a ;pri prvom prechode schova CY

;***
;  pocet_b=1,time=X,pocet=X:  WORD = 2
;                             CYCLE= 2*(pocet_a*8)

;  pocet_b>1,time=0,pocet=X:  WORD = 2+[2+7*(pocet_b-1)]
;                             CYCLE= 2+[2+6*(pocet_b-1)]*[pocet_H v A]
;                                    + 3*[pocet_L v A]

;  pocet_b>1,time=1,pocet=1:  WORD = 10+[2+7*(pocet_b-1)]
;                             CYCLE= (3 + [2+6*(pocet_b-1)])*(pocet_a*8)

;  pocet_b>1,time=1,pocet=2:  WORD = 7+[2+7*(pocet_b-1)]
;                             CYCLE= (3 + [2+6*(pocet_b-1)])*(pocet_a*8)
;

;Test na CARRY, ak C=H, potom pripocitaj (ADDC_R), ak nie skoc na
;zdrziavacu slucku

   if pocet_b == 1
               skpnc          ;ak pocet_b = 1, vzdy je dodrzany konstantny
                              ;cas prechodu rutinou
   else
       if time == 0
               skpc           ;ak sa nemusi dodrzat konstantny time prechodu
       else
               skpnc          ;ak sa musi dodrzat konstantny time prechodu
               goto    SKOK_3
       endif
   endif

  if pocet_b > 1
      if  time > 0
         if pocet == 1                 ;ak pocet=1
               ; opozdenie do casovej slucky (1,3,5,7,9max, ak pocet=1)
               movf   pocitadlo,w
               clrf   pocitadlo
            if pocet_b == 2
               bsf  pocitadlo,0        ;pocitadlo = 1
               nop
            endif
            if pocet_b == 3
               bsf  pocitadlo,0        ;pocitadlo = 3
               bsf  pocitadlo,1
            endif
            if pocet_b == 4
               bsf  pocitadlo,0        ;pocitadlo = 5
               bsf  pocitadlo,2
            endif
            if pocet_b == 5
               bsf  pocitadlo,3        ;pocitadlo = 7
               decf  pocitadlo,f
            endif
            if pocet_b == 6
               bsf  pocitadlo,0        ;pocitadlo = 9
               bsf  pocitadlo,3
            endif
         else                          ;ak pocet=2
            J = 2 * (pocet_b - 1)
            movlw   J
            movwf   (pocitadlo + 1)
         endif

SKOK_4   if  pocet == 1
               decfsz (pocitadlo),f    ;zdrziavacia slucka
         else
               decfsz (pocitadlo + 1),f
         endif
         goto SKOK_4

         if pocet == 1
               movwf  pocitadlo
         endif
      endif
         goto SKOK_2                   ;preskoc pripocitavanie
  endif

;pripocitanie B k hornym bytom buduceho vysledku

SKOK_3

  if      pocet_b > 1             ;pocet_b(max)=8
    add_r prvy_a+pocet_a,pocet_b,prvy_b,pocet_b,undef ;CYCLE=2+6*(pocet_b-1)
  else
    addwf  prvy_a + pocet_a,f
  endif

;*** CYCLE = pocet_b * (pocet_a * 8), WORD  = pocet_b

SKOK_2
       rrc_r prvy_a+pocet_a,pocet_b ; posun zvysnu cast vysledku
;
;*** CYCLE = (pocet_a * 8 - 1)*3 + 2 + pocet_a, WORD  = 2, + pocet_a

       decfsz  pocitadlo,f
       goto SKOK_1
     rrc_r   prvy_a,pocet_a  ;nastavi povodne CY a zarovna vysledok
;***
   endm
;===========================================================================
; Casove a dlzkove parametre rutiny:
;
;V hranatych zatvorkach su oddelene casti tykajuce sa casti v programe
;oddelenych *** v poznamke
;===========================================================================
;pocet_b=1,time=X,pocet=X: A=pocet_a, B=pocet_b,
;
;CYCLE=[B]+[3]+[A*A*8]+         [2*A*8]         +[B*A*8]+[3*(A*8-1)+2]+[A]=
;CYCLE=4+8*A+16*A+8*A+24*A-3+2+A= 3 + 49 * A + 8*A*A
;
;WORD =[B]+[3]+[A]+[2]+[B]+[2]+[A] = 9 + 2 * A
;===========================================================================
;pocet_b>1,time=1,pocet=1: A=pocet_a, B=pocet_b,
;
;CYCLE=[B]+[2]+[A*A*8]+   [(3+(2+6*(B-1)))*A*8]  +[B*A*8]+[3*(A*8-1)+2]+[A]=
;CYCLE=1+25*A+B+8*A*A+8*A*B+    48*A*B - 8*A=1 + 17*A + B + 8*A*A + 56*A*B
;
;WORD =[B]+[2]+[A]+          [9+(2+7*(B-1))]     +[B]+[2]+[A]=9+2*A+9*B
;===========================================================================
;pocet_b>1,time=1,pocet=2: A=pocet_a, B=pocet_b,
;
;CYCLE=[B]+[2]+[A*A*8]+   [(3+(2+6*(B-1)))*A*8]  +[B*A*8]+[3*(A*8-1)+2]+[A]=
;CYCLE=1+25*A+B+8*A*A+8*A*B+    48*A*B - 8*A=1 + 17*A + B + 8*A*A + 56*A*B
;
;WORD =[B]+[2]+[A]+           [6+(2+7*(B-1))]     +[B]+[2]+[A]=6+2*A+9*B
;===========================================================================
;pocet_b>1,time=0,pocet=X: A=pocet_a, B=pocet_b,
;                          A_L=pocet L v bytoch registrov patriacich do A
;                          A_H=pocet H v bytoch registrov patriacich do A
;
;CYCLE=[B]+[2]+[A*A*8]+[(2+(2+6*(B-1)))*A_H+3*A_L]+[B*A*8]+[3*(A*8-1)+2]+[A]=
;CYCLE=1 + 25*A + B + 8*A*A + 8*A*B + (6*B-2)*A_H+3*A_L
;
;WORD =[B]+[2]+[A]+         [2+(2+7*(B-1))]     +[B]+[2]+[A]=1+2*A+9*B
;===========================================================================

;=========================================================================
;                         Presun N-bytov
;=========================================================================
;
;presunie N-bytov od 'prvy_a' v dlzke 'pocet_a' do 'prvy_b
;
;meni W
;nemeni C,DC,Z
;
;
mov_r  macro   prvy_a,pocet_a,prvy_b

       local J
       J = 1

         while J <= pocet_a

             movf    prvy_a + J - 1,w
             movwf   prvy_b + J - 1

             J += 1
         endw
       endm
;
;CYCLE : 2*pocet_a
;WORD  : 2*pocet_a
;=========================================================================
;                         Vymena N-bytov
;=========================================================================
;
;vymeni N-bytov v dlzke 'pocet_a' medzi 'prvy_a' a 'prvy_b'
;
;meni W,C,DC,Z
;
exx_r  macro   prvy_a,pocet_a,prvy_b

       local J
       J = 1

         while J <= pocet_a



!!!!! CHYBNE !!!!! - Riesenie je lepsie cez XORWF


             clrw
             subwf    prvy_a + J - 1,w ; W:=-A
             addwf    prvy_b + J - 1,w ; W:=B-A
             subwf    prvy_b + J - 1,f ; B:=B - (B - A) => B:=A
             addwf    prvy_b + J - 1,f ; A:=A + (B - A) => A:=B

             J += 1
         endw
       endm
;
;CYCLE : 5*pocet_a
;WORD  : 5*pocet_a
;
;Rutina zaberie o 'pocet_a' menej WORD a CYCLE oproti vymene cez pomocnu
;premennu, naviac pomocnu premennu vobec nepotrebuje
;===========================================================================
;                       Rozdiel N-bytov so znamienkom
;=========================================================================
;
;  A_REG(J):= A_REG(J) - B_REG(K)
;
; !!! pocet registrov pre cislo A musi byt rovny, alebo vacsi ako pre B !!!
;
;meni W,C,DC,Z
;
;
;addc_r macro   prvy_a,pocet_a,prvy_b,pocet_b

;       local SK_REFER  ;koli setreniu navestiami v macre ( max.8)
;       local J
;       J = 1

;  if pocet_a < pocet_b
;       messg  "Rozsah A je mensi ako rozsah B, nemozno ulozit vysledok"
;  endif





;=========================================================================
;                       Sucet N-bytov so znamienkom
;=========================================================================
;
;  VYSLEDOK_REG(J):= A_REG(J) + B_REG(K)
;
; !!! pocet registrov pre cislo A musi byt rovny, alebo vacsi ako pre B !!!
;
;meni W,C,DC,Z
;
;!!!!!!!!
;rutina potrebuje jeden pomocny bit 'sign',iba ak A:= A + B!!!!!
;                                   ak V:= A + B, potom 'sign' nepotrebujem
;v programe je ulozeny v siedmom bite stavoveho registra, mozno modifikovat,
;ale bit musi byt na siedmom mieste !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;
;Ak 'vysledok' nieje definovana premenna, vysledok sa ulozi do A_REG
;
addsgn_r macro   prvy_a,pocet_a,prvy_b,pocet_b,vysledok


       local SK_REFER  ;koli setreniu navestiami v macre ( max.8)
       local J
       J = 1

 ifndef vysledok

       local POMOCNY
       POMOCNY = 0x03


       local   SIGN
#define        SIGN    POMOCNY,7 ;definovanie pomocneho bitu

 endif

       local   SIGN_A
#define        SIGN_A  prvy_a+pocet_a-1,7
       local   SIGN_B
#define        SIGN_B  prvy_b+pocet_b-1,7      ;definovanie znamienka B



  if pocet_a < pocet_b
       messg  "Rozsah A je mensi ako rozsah B, nemozno ulozit vysledok"
  endif

;urcenie znamienka B

;*** vysledok == undef, CYCLE=5
;                       WORD =5
;
;    vysledok == def  , CYCLE=3
;                       WORD =3




          ifndef vysledok
               bcf     SIGN    ;odpamatanie znamienka A do pomocneho bitu
               btfsc   SIGN_A
               bsf     SIGN
          endif


               movf    prvy_b,w
          ifndef vysledok
               addwf   prvy_a,f
          else
               addwf   prvy_a,w
               movwf   vysledok
          endif
       J = 1

;***

    while J < pocet_a
       if pocet_b > J
               movf    (prvy_b + J),w
       else
               movlw   0
               btfsc        SIGN_B ;koli znamienku B
               movlw   0xff        ;koli znamienku B
       endif
               skpnc
       ifndef vysledok
           if pocet_b > J
               goto    SK_REFER + (J-1)*        ;SKOK_A#v(J+1)
               addwf   (prvy_a + J),f
               goto    SK_REFER+2+(J-1)*       ;SKOK_B#v(J+1)
           else
               goto    SK_REFER+(J-1)*        ;SKOK_A#v(J+1)
               addwf   (prvy_a + J),f
               goto    SK_REFER+4+(J-1)*       ;SKOK_B#v(J+1)
           endif
       else
           if pocet_b > J
               goto    SK_REFER+(J-1)*      ;SKOK_A#v(J+1)
               addwf   (prvy_a + J),w
               movwf   (vysledok + J)
               goto    SK_REFER+3+(J-1)*  ;SKOK_B#v(J+1)
           else
               goto    SK_REFER+(J-1)*       ;SKOK_A#v(J+1)
               addwf   (prvy_a + J),w
               movwf   (vysledok + J)
               goto    SK_REFER+5+(J-1)*      ;SKOK_B#v(J+1)
           endif
       endif

       if  J == 1
SK_REFER
       endif

;SK_A#v(J+1)

       if pocet_b > J
               comf    (prvy_b + J),w
       else
               movlw   0xff
               btfsc        SIGN_B ;koli znamienku B
               movlw   0x00        ;koli znamienku B
       endif

       ifndef vysledok
               subwf   (prvy_a + J),f
       else
               subwf   (prvy_a + J),w
               movwf  (vysledok + J)
       endif

;SK_B#v(J+1)=SK_A#v(J+1)+2

               J += 1
    endw


;NASTAVENIE CY

;do CY nastavim hodnotu znamienka z vysledku
;*** CYCLE =7
;    WORD  =7
;



    ifndef     vysledok                ; nastavenie SIGN vysledku do CY
       rlc     prvy_a+pocet_a-1,w
    else
       rlc     vysledok+pocet_a-1,w
    endif

       movf    prvy_b+pocet_b-1,w


    ifndef vysledok
       andwf   pomocny,w
    else
       andwf   prvy_a+pocet_a-1,w
    endif

       andw    0x80            ;maskovanie posledneho bitu
       movlw   0x01            ;pripravit pre pripadne negovanie CY
       skpz                    ;ak sign(A)=H & sign(B)=H,xoruj CY
       xorwf   0x03,f

 endm

;
; Ak    A_REG:=A_REG + B_REG
;
;CYCLE = 2 + 6 * (pocet_a - 1)
;WORD  = 2 + 7 * (pocet_a - 1)
;
; Ak VYSLEDOK:=A_REG + B_REG
;
;CYCLE = 3 + 7 * (pocet_a - 1)
;WORD  = 3 + 9 * (pocet_a - 1)

;
;po skonceni rutiny, ak CY=H,   nastalo pretecenie vysledku
;                    ak CY=L, nenastalo pretecenie vysledku
;